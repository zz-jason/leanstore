#pragma once

#include "opentelemetry/nostd/shared_ptr.h"
#include <opentelemetry/exporters/ostream/log_record_exporter.h>
#include <opentelemetry/exporters/ostream/span_exporter_factory.h>
#include <opentelemetry/logs/provider.h>
#include <opentelemetry/sdk/logs/logger_provider_factory.h>
#include <opentelemetry/sdk/logs/processor.h>
#include <opentelemetry/sdk/logs/simple_log_record_processor_factory.h>
#include <opentelemetry/sdk/trace/exporter.h>
#include <opentelemetry/sdk/trace/processor.h>
#include <opentelemetry/sdk/trace/simple_processor_factory.h>
#include <opentelemetry/sdk/trace/tracer_provider_factory.h>
#include <opentelemetry/trace/provider.h>

namespace leanstore {

class Log {
public:
  static void InitTracer() {
    // Create ostream span exporter instance
    auto exporter =
        opentelemetry::exporter::trace::OStreamSpanExporterFactory::Create();
    auto processor =
        opentelemetry::sdk::trace::SimpleSpanProcessorFactory::Create(
            std::move(exporter));
    std::shared_ptr<opentelemetry::trace::TracerProvider> provider =
        opentelemetry::sdk::trace::TracerProviderFactory::Create(
            std::move(processor));

    // Set the global trace provider
    opentelemetry::trace::Provider::SetTracerProvider(provider);
  }

  static void InitLogger() {
    // Create ostream log exporter instance
    auto exporter =
        std::unique_ptr<opentelemetry::sdk::logs::LogRecordExporter>(
            new opentelemetry::exporter::logs::OStreamLogRecordExporter);
    auto processor =
        opentelemetry::sdk::logs::SimpleLogRecordProcessorFactory::Create(
            std::move(exporter));
    std::shared_ptr<opentelemetry::logs::LoggerProvider> provider(
        opentelemetry::sdk::logs::LoggerProviderFactory::Create(
            std::move(processor)));

    // Set the global logger provider
    opentelemetry::logs::Provider::SetLoggerProvider(provider);
  }

  static void CleanupTracer() {
    std::shared_ptr<opentelemetry::trace::TracerProvider> none;
    opentelemetry::trace::Provider::SetTracerProvider(none);
  }

  static void CleanupLogger() {
    std::shared_ptr<opentelemetry::logs::LoggerProvider> none;
    opentelemetry::logs::Provider::SetLoggerProvider(none);
  }

  static auto GetTracer() {
    auto provider = opentelemetry::trace::Provider::GetTracerProvider();
    return provider->GetTracer("foo_library");
  }

  static auto GetLogger() {
    auto provider = opentelemetry::logs::Provider::GetLoggerProvider();
    return provider->GetLogger("foo_library");
  }

  Log() {
    auto span = GetTracer()->StartSpan("span 1");
    auto scopedSpan =
        opentelemetry::trace::Scope(GetTracer()->StartSpan("foo_library"));
    auto logger = GetLogger();
    logger->Debug("body", span->GetContext().trace_id(),
                  span->GetContext().span_id(),
                  span->GetContext().trace_flags());
  }

  ~Log() {
  }
};

} // namespace leanstore