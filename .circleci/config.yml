# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  codecov: codecov/codecov@3.3.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: ubuntu:23.04

    environment:
      DEBIAN_FRONTEND: "noninteractive"
      TZ: "Asia/Shanghai"
      VCPKG_ROOT: "/opt/vcpkg"

    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout

      - run:
          name: "Install dependencies"
          command: |
            apt update
            apt install -y build-essential git cmake make gcc-13 g++-13
            apt install -y libaio-dev python3-pip cppcheck ninja-build
            apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            apt install -y curl zip unzip tar pkg-config
            apt install -y autoconf libtool
            ln -sf /usr/bin/cpp-13        /usr/bin/cpp
            ln -sf /usr/bin/g++-13        /usr/bin/g++
            ln -sf /usr/bin/gcc-13        /usr/bin/gcc
            ln -sf /usr/bin/gcc-ar-13     /usr/bin/gcc-ar
            ln -sf /usr/bin/gcc-nm-13     /usr/bin/gcc-nm
            ln -sf /usr/bin/gcc-ranlib-13 /usr/bin/gcc-ranlib
            ln -sf /usr/bin/gcov-13       /usr/bin/gcov
            ln -sf /usr/bin/gcov-dump-13  /usr/bin/gcov-dump
            ln -sf /usr/bin/gcov-tool-13  /usr/bin/gcov-tool
            ln -sf /usr/bin/lto-dump-13   /usr/bin/lto-dump
            ln -sf /usr/bin/g++-13        /usr/bin/c++
            ln -sf /usr/bin/gcc-13        /usr/bin/cc
            pip3 install gcovr==6.0 --break-system-packages
            git clone https://github.com/Microsoft/vcpkg.git /opt/vcpkg
            echo 'export VCPKG_ROOT=/opt/vcpkg' >> ~/.bashrc
            echo 'export PATH=$VCPKG_ROOT:$PATH' >> ~/.bashrc
            echo 'export VCPKG_FORCE_SYSTEM_BINARIES=1' >> ~/.bashrc
            rm -rf /var/lib/apt/lists/*

      - run:
          name: "Config project"
          command: |
            source ~/.bashrc
            cmake --preset debug_tsan

      - run:
          name: "Cppcheck"
          command: |
            source ~/.bashrc
            cppcheck --project=build/debug_tsan/compile_commands.json -i tests --error-exitcode=1

      - run:
          name: "Build project"
          command: |
            source ~/.bashrc
            cmake --build build/debug_tsan -j 4
          no_output_timeout: 5m

      - run:
          name: "Test project"
          command: |
            source ~/.bashrc
            TSAN_OPTIONS="suppressions=$(pwd)/tsan_suppression" ctest --test-dir build/debug_tsan --output-on-failure -j 2
          no_output_timeout: 5m

      - run:
          name: "Generate coverage file"
          command: |
            source ~/.bashrc
            gcovr -v -r . --xml-pretty --xml=coverage.xml --exclude 'build/*' --exclude 'tests/*' --exclude 'benchmarks/*' --verbose

      - codecov/upload:
          file: coverage.xml
          token: CI_CODECOV_TOKEN

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build-debug:
    jobs:
      - build:
          context:
            - build
